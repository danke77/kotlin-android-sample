apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    def globalConfig = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfig.getAt("androidCompileSdkV")

    defaultConfig {
        applicationId "${appId}"
        minSdkVersion globalConfig.getAt("androidMinSdkV")
        targetSdkVersion globalConfig.getAt("androidTargetSdkV")
        versionCode "${VERSION_CODE}" as int
        versionName "${VERSION_NAME}"
    }

    signingConfigs {
        release {
            def storeFileValue = ""
            def storePasswordValue = ""
            def keyAliasValue = ""
            def keyPasswordValue = ""

            if (new File('local.properties').exists()) {
                Properties properties = new Properties()
                properties.load(project.rootProject.file('local.properties').newDataInputStream())
                storeFileValue = properties.getProperty("store.file")
                storePasswordValue = properties.getProperty("store.password")
                keyAliasValue = properties.getProperty("key.alias")
                keyPasswordValue = properties.getProperty("key.password")
            }

            storeFile file("${storeFileValue}")
            storePassword "${storePasswordValue}"
            keyAlias "${keyAliasValue}"
            keyPassword "${keyPasswordValue}"
        }
        debug {
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }

    dexOptions {
        incremental true
        javaMaxHeapSize "2048M"
    }

    lintOptions {
        abortOnError false
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java', '.apt_generated']
            aidl.srcDirs = ['src/main/aidl', '.apt_generated']
            assets.srcDirs = ['src/main/assets']
            res.srcDirs =
                    [
                            'src/main/res/layouts/common',
                            'src/main/res/layouts/component',
                            'src/main/res/layouts/user',
                            'src/main/res/layouts',
                            'src/main/res'
                    ]
        }
        main.java.srcDirs += 'src/main/kotlin'
    }

    packagingOptions {
        exclude('META-INF/LICENSE.txt')
        exclude('META-INF/NOTICE.txt')
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    def androidLibs = rootProject.ext.androidDependencies
    implementation androidLibs.appcompatV7
    implementation androidLibs.supportV13
    implementation androidLibs.supportDesign
    implementation androidLibs.cardview

    def kotlinLibs = rootProject.ext.kotlinDependencies
    implementation kotlinLibs.kotlinStdlib
    implementation kotlinLibs.ankoCommon
    implementation kotlinLibs.ankoSqlite

    def thirdLibs = rootProject.ext.thirdDependencies
    implementation thirdLibs.gson
    implementation thirdLibs.glide
    implementation thirdLibs.titan
    implementation thirdLibs.circleIamgeView
    implementation thirdLibs.materialEdittext
    implementation thirdLibs.materialDialog
    implementation thirdLibs.easypermissions
    debugApi thirdLibs.leakcanaryDebug
    releaseApi thirdLibs.leakcanaryRelease

    def testLibs = rootProject.ext.testDependencies
    testImplementation testLibs.junit
}
